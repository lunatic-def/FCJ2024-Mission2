[
{
	"uri": "//localhost:1313/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "- This workshop is my attemp to learn about Lambda severless framework and Iac, this will include creating serverless E-commerce Microservice simple infrastruture. Using Infrastructor as code (CDK-typescript) and JS code for lambda function\n2 main part:\nDevelop infrastruture with AWS CDK typescript Develop lambda function with AWS SDK and NodeJS *STEPS\nCreate DynamoDB tables for Product service -\u0026gt; Basket service -\u0026gt; Order service Create Lambda function for Product service -\u0026gt; Basket service -\u0026gt; Order service Implement Lambda function for Product service -\u0026gt; Basket service -\u0026gt; Order service Create API Gateway EventBridge: eventrules, eventbus Create SQS queue "
},
{
	"uri": "//localhost:1313/2-product/1-dynamodb/",
	"title": "Dynamodb table",
	"tags": [],
	"description": "",
	"content": " Api reference basic example aws cdk official github repo import {\rAttribute,\rAttributeType,\rBillingMode,\rITable,\rTable,\rTableV2,\r} from \u0026#34;aws-cdk-lib/aws-dynamodb\u0026#34;;\rimport { RemovalPolicy } from \u0026#34;aws-cdk-lib\u0026#34;;\rimport { Construct } from \u0026#34;constructs\u0026#34;;\rexport class Dynamodb extends Construct {\rpublic readonly ptable: ITable;\rconstructor(scope: Construct, id: string) {\rsuper(scope, id);\rthis.ptable = this.ProductTable(); //return variable\r}\rprivate ProductTable(): ITable {\rconst table = new Table(this, \u0026#34;product-table\u0026#34;, {\rpartitionKey: {\rname: \u0026#34;id\u0026#34;,\rtype: AttributeType.STRING,\r},\rtableName: \u0026#34;product\u0026#34;,\rbillingMode: BillingMode.PAY_PER_REQUEST,\rremovalPolicy: RemovalPolicy.DESTROY,\r});\rreturn table;\r}\r} In this section we will only create dynamodb table for product function: Table name: product Partition key: id -\u0026gt; This class will return an ITable type of dynamodb\n"
},
{
	"uri": "//localhost:1313/3-basket/1-dynamodb/",
	"title": "Dynamodb table",
	"tags": [],
	"description": "",
	"content": " Api reference basic example aws cdk official github repo import {\rAttribute,\rAttributeType,\rBillingMode,\rITable,\rTable,\rTableV2,\r} from \u0026#34;aws-cdk-lib/aws-dynamodb\u0026#34;;\rimport { RemovalPolicy } from \u0026#34;aws-cdk-lib\u0026#34;;\rimport { Construct } from \u0026#34;constructs\u0026#34;;\rexport class Dynamodb extends Construct {\rpublic readonly btable: ITable;\rconstructor(scope: Construct, id: string) {\rsuper(scope, id);\rthis.btable = this.BasketTable(); //return variable\r}\rprivate BasketTable(): ITable {\rconst table = new Table(this, \u0026#34;basket-table\u0026#34;, {\rpartitionKey: {\rname: \u0026#34;userName\u0026#34;,\rtype: AttributeType.STRING,\r},\rtableName: \u0026#34;basket\u0026#34;,\rbillingMode: BillingMode.PAY_PER_REQUEST,\rremovalPolicy: RemovalPolicy.DESTROY,\r});\rreturn table;\r}\r} In this section we will only create dynamodb table for product function: Table name: product Partition key: userName -\u0026gt; This class will return an ITable type of dynamodb\nOne person can have many items in their database\nexample\nbasket: Primary key - userName -- items\ritem1 - { quantity - color - price - productId - productName}\ritem2 - { quantity - color - price - productId - productName} "
},
{
	"uri": "//localhost:1313/4-order/1-eventbus/",
	"title": "EventBus",
	"tags": [],
	"description": "",
	"content": "\nApi reference //create eventbus\rconst bus = new EventBus(this, \u0026#39;EventBus\u0026#39;, {\reventBusName: \u0026#39;EventBus\u0026#39;\r});\r//create rule\rconst CheckoutRule = new Rule(this, \u0026#34;CheckoutRule\u0026#34;, {\rruleName: \u0026#34;CheckoutBasketRule\u0026#34;,\reventBus: bus,\renabled: true,\rdescription: \u0026#34;rule for when checkout basket\u0026#34;,\reventPattern: {\rsource: [\u0026#34;com.swn.basket.checkoutbasket\u0026#34;],\rdetailType: [\u0026#34;CheckoutBasket\u0026#34;],\r}\r});\r//add target to rule\rCheckoutRule.addTarget(new SqsQueue(*Subscriber*));\r// grant permission to function to create event to bus\rbus.grantPutEventsTo(*Publisher*); "
},
{
	"uri": "//localhost:1313/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "What is Amazon EnventBridge\nServerless event bus service for AWS services Build event-drive applications at scale using events generated from your apps Use to connet your applications with data from a variety of sources, integrated SaaS applications AWS services to targets such as AWS lambda function - Amazon EventBridge Events An event indicates a change in an environment such as an AWS environment of a SaaS partnet service. Events are represented as JSON obj and they all have similar structure and the same top-level fields\nBenefits of Amazon EventBridge\n- Build event-drive architecture:\nWith EventBridge, your target don\u0026rsquo;t need to be awareof event sources because you can filter and publish directly to EventBridge. Improve developer agility as well as application resiliency with loosely coupled event-drive architectures.\n- Connect SaaS apps\nEventBridge ingest data supporte SaaS applications and routes it to AWS services and SaaS targets, SaaS apps to trigger workflow s for customer support, business operations\n- Write less custome code\nYou can ingest, filter, transform and deliver events without writing custom code. The EventBridge schema registry stores a collection of easy-to-find event schemas\n- Reduce opertaional overhead\nThere are no servers to provision, patch and management automatically based on the number of events ingested. Built-in distributed availability and fault-tolerance. Native event archive and replay capability\nEventBridge includes two ways to process events: event buses and pipes.\nEvent buses are routers that receive events and delivers them to zero or more targets. Event buses are well-suited for routing events from many sources to many targets, with optional transformation of events prior to delivery to a target.Rules associated with the event bus evaluate events as they arrive. Each rule checks whether an event matches the rule\u0026rsquo;s pattern. If the event does match, EventBridge sends the event. You associate a rule with a specific event bus, so the rule only applies to events received by that event bus. Pipes EventBridge Pipes is intended for point-to-point integrations; each pipe receives events from a single source for processing and delivery to a single target. Pipes also include support for advanced transformations and enrichment of events prior to delivery to a target. Pipes and event buses are often used together. A common use case is to create a pipe with an event bus as its target; the pipe sends events to the event bus, which then sends those events on to multiple targets. For example, you could create a pipe with a DynamoDB stream for a source, and an event bus as the target. The pipe receives events from the DynamoDB stream and sends them to the event bus, which then sends them on to multiple targets according to the rules you\u0026rsquo;ve specified on the event bus.\n"
},
{
	"uri": "//localhost:1313/1-introduce/preparation/",
	"title": "Preparation",
	"tags": [],
	"description": "",
	"content": "\rYou need to create an adminitrative account for this lab with secret keys to access to aws cli, then you can use aws cdk tools\nSource\nAWS CDK guide AWS SDK Javascript V3 AWS SDK developer guide "
},
{
	"uri": "//localhost:1313/4-order/2-dynamodb/",
	"title": "Dynamodb table",
	"tags": [],
	"description": "",
	"content": " Api reference basic example aws cdk official github repo import {\rAttribute,\rAttributeType,\rBillingMode,\rITable,\rTable,\rTableV2,\r} from \u0026#34;aws-cdk-lib/aws-dynamodb\u0026#34;;\rimport { RemovalPolicy } from \u0026#34;aws-cdk-lib\u0026#34;;\rimport { Construct } from \u0026#34;constructs\u0026#34;;\rexport class Dynamodb extends Construct {\rpublic readonly otable: ITable;\rconstructor(scope: Construct, id: string) {\rsuper(scope, id);\rthis.otable = this.OrderTable(); //return variable\r}\rprivate OrderTable(): ITable {\rconst table = new Table(this, \u0026#34;sort-table\u0026#34;, {\rpartitionKey: {\rname: \u0026#34;userName\u0026#34;,\rtype: AttributeType.STRING,\r},\rsortKey: {\rname: \u0026#34;date\u0026#34;,\rtype: AttributeType.STRING,\r},\rtableName: \u0026#34;orders\u0026#34;,\rbillingMode: BillingMode.PAY_PER_REQUEST,\rremovalPolicy: RemovalPolicy.DESTROY,\r});\rreturn table;\r}\r} In this section we will only create dynamodb table for product function: Table name: orders Partition key: userName Sort key: date -\u0026gt; This class will return an ITable type of dynamodb\nexample\nbasket: PrimaryKey: userName SortKey: date -- totalPrice - firstName - lastName - email - address - paymentMethod - cardInfo "
},
{
	"uri": "//localhost:1313/2-product/2-lambda/",
	"title": "Lambda",
	"tags": [],
	"description": "",
	"content": " Api reference basic example I will you Lambda Nodejs for automatic transpiling and bundling of TypeScript or Javascript code.It uses esbuild under the hood (esbuild is an extremely fast bundler for the web)\nAdd all the necessary lib for aws lambda using nodejs function and also dynamodb table import {\rNodejsFunction,\rNodejsFunctionProps,\r} from \u0026#34;aws-cdk-lib/aws-lambda-nodejs\u0026#34;;\rimport { Runtime } from \u0026#34;aws-cdk-lib/aws-lambda\u0026#34;;\rimport { ITable } from \u0026#34;aws-cdk-lib/aws-dynamodb\u0026#34;;\rimport { Construct } from \u0026#34;constructs\u0026#34;;\rimport { join } from \u0026#34;path\u0026#34;; Define dynamodb interface interface DynamodbProps {\rptable: ITable;\r} Define Lambda Nodejs \u0026ldquo;Product\u0026rdquo; function private ProductFunction(ptable: ITable): NodejsFunction {\r// Define NodeJS Function properties\rconst props: NodejsFunctionProps = {\rbundling: {\rexternalModules: [\u0026#34;aws-sdk\u0026#34;],\r},\renvironment: {\rPRIMARY_KEY: \u0026#34;id\u0026#34;,\rDYNAMODB_TABLE_NAME: ptable.tableName,\r},\rruntime: Runtime.NODEJS_16_X,\r};\r// Product microservices lambda function\rconst productFunction = new NodejsFunction(this, \u0026#34;productLambdaFunction\u0026#34;, {\rentry: join(__dirname, `/../nodejs_src/product/index.js`),\r...props,\r});\r// grant table permission\rptable.grantReadWriteData(productFunction);\rreturn productFunction;\r} Define the lambda_nodejs properties: bundling: used to configure the process of packaging the required dependencies and code into a single deployment. In this case specific the external module that need to be included (aws-sdk module) -\u0026gt; indicating that it should be included in the bundled deployment artifact for the Nodejs function environment: define the dynamodb variable use for deployment runtime: Lambda function runtime environment. In this case NodeJS 16 define the lambda_nodejs function: entry: path of lambda handler props: lambda previously defined properties Grant dynamodb read write permission for lambda function Final code import {\rNodejsFunction,\rNodejsFunctionProps,\r} from \u0026#34;aws-cdk-lib/aws-lambda-nodejs\u0026#34;;\rimport { Runtime } from \u0026#34;aws-cdk-lib/aws-lambda\u0026#34;;\rimport { ITable } from \u0026#34;aws-cdk-lib/aws-dynamodb\u0026#34;;\rimport { Construct } from \u0026#34;constructs\u0026#34;;\rimport { join } from \u0026#34;path\u0026#34;;\rinterface DynamodbProps {\rptable: ITable;\r}\rexport class LambdaFunction extends Construct {\rpublic readonly pFunction: NodejsFunction;\rconstructor(scope: Construct, id: string, dbprops: DynamodbProps) {\rsuper(scope, id);\rthis.pFunction = this.ProductFunction(dbprops.ptable);\r}\rprivate ProductFunction(ptable: ITable): NodejsFunction {\r// Define NodeJS Function properties\rconst props: NodejsFunctionProps = {\rbundling: {\rexternalModules: [\u0026#34;aws-sdk\u0026#34;],\r},\renvironment: {\rPRIMARY_KEY: \u0026#34;id\u0026#34;,\rDYNAMODB_TABLE_NAME: ptable.tableName,\r},\rruntime: Runtime.NODEJS_16_X,\r};\r// Product microservices lambda function\rconst productFunction = new NodejsFunction(this, \u0026#34;productLambdaFunction\u0026#34;, {\rentry: join(__dirname, `/../nodejs_src/product/index.js`),\r...props,\r});\r// grant table permission\rptable.grantReadWriteData(productFunction);\rreturn productFunction;\r}\r} =\u0026gt;Finnaly this class return NodejsFunction variable.\n"
},
{
	"uri": "//localhost:1313/3-basket/2-lambda/",
	"title": "Lambda",
	"tags": [],
	"description": "",
	"content": " Api reference basic example I will you Lambda Nodejs for automatic transpiling and bundling of TypeScript or Javascript code.It uses esbuild under the hood (esbuild is an extremely fast bundler for the web)\nAdd all the necessary lib for aws lambda using nodejs function and also dynamodb table import {\rNodejsFunction,\rNodejsFunctionProps,\r} from \u0026#34;aws-cdk-lib/aws-lambda-nodejs\u0026#34;;\rimport { Runtime } from \u0026#34;aws-cdk-lib/aws-lambda\u0026#34;;\rimport { ITable } from \u0026#34;aws-cdk-lib/aws-dynamodb\u0026#34;;\rimport { Construct } from \u0026#34;constructs\u0026#34;;\rimport { join } from \u0026#34;path\u0026#34;; Define dynamodb interface interface DynamodbProps {\rbtable: ITable;\r} Define Lambda Nodejs \u0026ldquo;Product\u0026rdquo; function private BasketFunction(btable: ITable): NodejsFunction {\r// Define Node Function properties\rconst props: NodejsFunctionProps = {\rbundling: {\rexternalModules: [\u0026#34;aws-sdk\u0026#34;],\r},\renvironment: {\rPRIMARY_KEY: \u0026#34;userName\u0026#34;,\rDYNAMODB_TABLE_NAME: btable.tableName,\rEVENT_SOURCE: \u0026#34;com.swn.basket.checkoutbasket\u0026#34;,\rEVENT_DETAILTYPE: \u0026#34;CheckoutBasket\u0026#34;,\rEVENT_BUSNAME: \u0026#34;SwnEventBus\u0026#34;,\r},\r};\rconst basketfunction = new NodejsFunction(this, \u0026#34;Basket-function\u0026#34;, {\rentry: join(__dirname, `/../basket/index.js`),\r...props,\r});\rbtable.grantReadWriteData(basketfunction);\rreturn basketfunction;\r} Define the lambda_nodejs properties: bundling: used to configure the process of packaging the required dependencies and code into a single deployment. In this case specific the external module that need to be included (aws-sdk module) -\u0026gt; indicating that it should be included in the bundled deployment artifact for the Nodejs function environment: define the dynamodb variable use for deployment runtime: Lambda function runtime environment. In this case NodeJS 16 Define the lambda_nodejs function: entry: path of lambda handler props: lambda previously defined properties Grant dynamodb read write permission for lambda function Final code import {\rNodejsFunction,\rNodejsFunctionProps,\r} from \u0026#34;aws-cdk-lib/aws-lambda-nodejs\u0026#34;;\rimport { Runtime } from \u0026#34;aws-cdk-lib/aws-lambda\u0026#34;;\rimport { ITable } from \u0026#34;aws-cdk-lib/aws-dynamodb\u0026#34;;\rimport { Construct } from \u0026#34;constructs\u0026#34;;\rimport { join } from \u0026#34;path\u0026#34;;\rinterface DynamodbProps {\rbtable: ITable;\r}\rexport class LambdaFunction extends Construct {\rpublic readonly pFunction: NodejsFunction;\rconstructor(scope: Construct, id: string, dbprops: DynamodbProps) {\rsuper(scope, id);\rthis.bFunction = this.BasketFunction(dbprops.ptable);\r}\rprivate BasketFunction(btable: ITable): NodejsFunction {\r// Define Node Function properties\rconst props: NodejsFunctionProps = {\rbundling: {\rexternalModules: [\u0026#34;aws-sdk\u0026#34;],\r},\renvironment: {\rPRIMARY_KEY: \u0026#34;userName\u0026#34;,\rDYNAMODB_TABLE_NAME: btable.tableName,\rEVENT_SOURCE: \u0026#34;com.swn.basket.checkoutbasket\u0026#34;,\rEVENT_DETAILTYPE: \u0026#34;CheckoutBasket\u0026#34;,\rEVENT_BUSNAME: \u0026#34;SwnEventBus\u0026#34;,\r},\r};\rconst basketfunction = new NodejsFunction(this, \u0026#34;Basket-function\u0026#34;, {\rentry: join(__dirname, `/../basket/index.js`),\r...props,\r});\rbtable.grantReadWriteData(basketfunction);\rreturn basketfunction;\r}\r} =\u0026gt;Finnaly this class return NodejsFunction variable.\n"
},
{
	"uri": "//localhost:1313/2-product/",
	"title": "Product service ",
	"tags": [],
	"description": "",
	"content": "In this step we will create lambda product service with simple CRUD REST API function. Steps\nCreate DynamoDB with AWS CDK Create Product lambda with AWS CDK Create Lambda Product function with AWS SDK API Create Api gateway "
},
{
	"uri": "//localhost:1313/1-introduce/folder_struct/",
	"title": "Project Folder Structure",
	"tags": [],
	"description": "",
	"content": " Main folder: bin,lib and src folder, bin/lib folders generate by aws cdk project template bin folder: starting point of application lib folder: Infrastructure ad codes, Iac Stacks with aws cdk nodejs_src folder: Microservice deployment codes with Nodejs =\u0026gt; With \u0026ldquo;test-stack.ts\u0026rdquo; as the main stack with\n"
},
{
	"uri": "//localhost:1313/3-basket/",
	"title": "Basket service",
	"tags": [],
	"description": "",
	"content": "In this step we will create lambda basket service with simple CRUD REST API function and publish checkout event to EventBridge. Steps\nCreate DynamoDB with AWS CDK Create Basket lambda with AWS CDK Create Lambda Basket function with AWS SDK API Create Api gateway "
},
{
	"uri": "//localhost:1313/4-order/3-lambda/",
	"title": "Lambda",
	"tags": [],
	"description": "",
	"content": " Api reference basic example Add all the necessary lib for aws lambda using nodejs function and also dynamodb table import {\rNodejsFunction,\rNodejsFunctionProps,\r} from \u0026#34;aws-cdk-lib/aws-lambda-nodejs\u0026#34;;\rimport { Runtime } from \u0026#34;aws-cdk-lib/aws-lambda\u0026#34;;\rimport { ITable } from \u0026#34;aws-cdk-lib/aws-dynamodb\u0026#34;;\rimport { Construct } from \u0026#34;constructs\u0026#34;;\rimport { join } from \u0026#34;path\u0026#34;; Define dynamodb interface interface DynamodbProps {\rotable: ITable;\r} Define Lambda Nodejs \u0026ldquo;Product\u0026rdquo; function private OrderFunction(otable: ITable): NodejsFunction {\r// Define NodeJS function properties\rconst props: NodejsFunctionProps = {\rbundling: {\rexternalModules: [\u0026#34;aws-sdk\u0026#34;],\r},\renvironment: {\rPRIMARY_KEY: \u0026#34;userName\u0026#34;,\rSORT_KEY: \u0026#34;date\u0026#34;,\rDYNAMODB_TABLE_NAME: otable.tableName,\r},\r};\rconst orderfunction = new NodejsFunction(this, \u0026#34;Order-function\u0026#34;, {\rentry: join(__dirname, `/../nodejs_src/order/index.js`),\r...props,\r});\rotable.grantReadWriteData(orderfunction);\rreturn orderfunction;\r} Define the lambda_nodejs properties: bundling: used to configure the process of packaging the required dependencies and code into a single deployment. In this case specific the external module that need to be included (aws-sdk module) -\u0026gt; indicating that it should be included in the bundled deployment artifact for the Nodejs function environment: define the dynamodb variable use for deployment runtime: Lambda function runtime environment. In this case NodeJS 16 Define the lambda_nodejs function: entry: path of lambda handler props: lambda previously defined properties Grant dynamodb read write permission for lambda function Final code import {\rNodejsFunction,\rNodejsFunctionProps,\r} from \u0026#34;aws-cdk-lib/aws-lambda-nodejs\u0026#34;;\rimport { Runtime } from \u0026#34;aws-cdk-lib/aws-lambda\u0026#34;;\rimport { ITable } from \u0026#34;aws-cdk-lib/aws-dynamodb\u0026#34;;\rimport { Construct } from \u0026#34;constructs\u0026#34;;\rimport { join } from \u0026#34;path\u0026#34;;\rinterface DynamodbProps {\rotable: oTable;\r}\rexport class LambdaFunction extends Construct {\rpublic readonly oFunction: NodejsFunction;\rconstructor(scope: Construct, id: string, dbprops: DynamodbProps) {\rsuper(scope, id);\rthis.oFunction = this.BasketFunction(DynamodbProps.otable);\r}\rprivate OrderFunction(otable: ITable): NodejsFunction {\r// Define NodeJS function properties\rconst props: NodejsFunctionProps = {\rbundling: {\rexternalModules: [\u0026#34;aws-sdk\u0026#34;],\r},\renvironment: {\rPRIMARY_KEY: \u0026#34;userName\u0026#34;,\rSORT_KEY: \u0026#34;date\u0026#34;,\rDYNAMODB_TABLE_NAME: otable.tableName,\r},\r};\rconst orderfunction = new NodejsFunction(this, \u0026#34;Order-function\u0026#34;, {\rentry: join(__dirname, `/../nodejs_src/order/index.js`),\r...props,\r});\rotable.grantReadWriteData(orderfunction);\rreturn orderfunction;\r}\r} =\u0026gt;Finnaly this class return NodejsFunction variable.\n"
},
{
	"uri": "//localhost:1313/2-product/3-lambda_func/",
	"title": "Lambda NodeJS function",
	"tags": [],
	"description": "",
	"content": " example lambda \u0026amp; apigw proxy event 1. Create a another file which contain the necessary packages named \u0026ldquo;package.json\u0026rdquo; Add content: Download the packages api: Develop lambda production functions:\n2. Declare dynamodb service client object to call for dynamodb table\nconst ddbClient = new DynamoDBClient(); 3. Switch case event.httpMethod to perform web CRUD operations\nEvent httpd example .json link {\r\u0026#34;resource\u0026#34;: \u0026#34;/\u0026#34;,\r\u0026#34;path\u0026#34;: \u0026#34;/\u0026#34;,\r\u0026#34;httpMethod\u0026#34;: \u0026#34;GET\u0026#34;,\r\u0026#34;headers\u0026#34;: {\r\u0026#34;accept\u0026#34;: \u0026#34;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\u0026#34;,\r\u0026#34;accept-encoding\u0026#34;: \u0026#34;gzip, deflate, br\u0026#34;,\r\u0026#34;accept-language\u0026#34;: \u0026#34;en-US,en;q=0.9\u0026#34;,\r...\r}\r\u0026#34;queryStringParameters\u0026#34;: null,\r\u0026#34;multiValueQueryStringParameters\u0026#34;: null,\r\u0026#34;pathParameters\u0026#34;: null,\r\u0026#34;stageVariables\u0026#34;: null,\r\u0026#34;requestContext\u0026#34;: {\r\u0026#34;resourceId\u0026#34;: \u0026#34;2gxmpl\u0026#34;,\r\u0026#34;resourcePath\u0026#34;: \u0026#34;/\u0026#34;,\r\u0026#34;httpMethod\u0026#34;: \u0026#34;GET\u0026#34;,\r\u0026#34;extendedRequestId\u0026#34;: \u0026#34;JJbxmplHYosFVYQ=\u0026#34;,\r\u0026#34;requestTime\u0026#34;: \u0026#34;10/Mar/2020:00:03:59 +0000\u0026#34;,\r\u0026#34;path\u0026#34;: \u0026#34;/Prod/\u0026#34;,\r}\r} Response example format: var response = {\r\u0026#34;statusCode\u0026#34;: 200,\r\u0026#34;headers\u0026#34;: {\r\u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34;\r},\r\u0026#34;isBase64Encoded\u0026#34;: false,\r\u0026#34;multiValueHeaders\u0026#34;: { \u0026#34;X-Custom-Header\u0026#34;: [\u0026#34;My value\u0026#34;, \u0026#34;My other value\u0026#34;],\r},\r\u0026#34;body\u0026#34;: \u0026#34;{\\n \\\u0026#34;TotalCodeSize\\\u0026#34;: 104330022,\\n \\\u0026#34;FunctionCount\\\u0026#34;: 26\\n}\u0026#34;\r} 4. Deploy the switch case event \u0026ldquo;GET\u0026rdquo;\nswitch (event.httpMethod) {\rcase \u0026#34;GET\u0026#34;:\rif (event.queryStringParameters != null) {\r// GET product/1234?category=Phone\rbody = await GetProductsByCategory(event);\r} else if (event.queryStringParameters != null) {\r// GET product/{id}\rbody = await GetProduct(event.pathParameters.id);\r} else {\rbody = await GetAllProducts();\r}\rbreak;\r} Working with Items and Attributes of dynamodb.\nsdk dynamodb example\naws-sdk dynamodb api\naws-sdk dynamodb-util api\na. Get product \u0026amp;\u0026amp; Get all product\nThe function receive the \u0026ldquo;id\u0026rdquo; parameter within the event.queryStringParameters.id come form Apigw\nTableName: DNAMODB_TABLE_NAME get from the environment variable of lambda Key: primary key of the item to retrieve, in this case \u0026ldquo;id\u0026rdquo; =\u0026gt; Dynamodb - GetItemCommand return data match a set of attributes for the item with the given primary key =\u0026gt; Dynamodb - ScanCommand operation returns one or more items and item attributes by accessing every item in a table or a secondary index // GET product/{id}\rconst GetProduct = async (productId) =\u0026gt; {\rconsole.log(\u0026#34;getProduct\u0026#34;);\rtry {\rconst params = {\rTableName: process.env.DYNAMODB_TABLE_NAME,\r//marshall convert JavaScript object into DynamoDB Record\rKey: marshall({ id: productId }),\r};\rconst { Item } = await ddbClient.send(new GetItemCommand(params));\rconsole.log(Item);\r//unmarshall convert DynamoDB Record into JavaScript object\r// if item is not null unmarshall(Item) else return {}\rreturn Item ? unmarshall(Item) : {};\r} catch (e) {\rconsole.error(e);\rthrow e;\r}\r};\r// GET product/\rconst GetAllProducts = async () =\u0026gt; {\rconsole.log(\u0026#34;getAllProducts\u0026#34;);\rtry {\rconst params = {\rTableName: process.env.DYNAMODB_TABLE_NAME,\r};\rconst { Items } = await ddbClient.send(new ScanCommand(params));\rconsole.log(Items);\rreturn Items ? Items.map((item) =\u0026gt; unmarshall(item)) : {};\r} catch (e) {\rconsole.error(e);\rthrow e;\r}\r}; b. Get product by category\n=\u0026gt; Dynamodb-QueryCommand: Query returns all items with that partition key value.\nconst GetProductsByCategory = async (event) =\u0026gt; {\rconsole.log(\u0026#34;getProductsByCategory\u0026#34;);\rtry {\r// GET product/1234?category=Phone\rconst productId = event.pathParameters.id;\rconst category = event.queryStringParameters.category;\rconst params = {\rKeyConditionExpression: \u0026#34;id = :productId\u0026#34;,\rFilterExpression: \u0026#34;contains (category, :category)\u0026#34;,\rExpressionAttributeValues: {\r\u0026#34;:productId\u0026#34;: { S: productId },\r\u0026#34;:category\u0026#34;: { S: category },\r},\rTableName: process.env.DYNAMODB_TABLE_NAME,\r};\rconst { Items } = await ddbClient.send(new QueryCommand(params));\rconsole.log(Items);\rreturn Items.map((item) =\u0026gt; unmarshall(item));\r} catch (e) {\rconsole.error(e);\rthrow e;\r}\r}; 5. Deploy the switch case event \u0026ldquo;POST\u0026rdquo;\ncase \u0026#34;POST\u0026#34;:\rbody = await CreateProduct(event);\rbreak; Create product The function receive the parameter event.body come form Apigw:\nexample\n{\r\u0026#34;id\u0026#34;:0309,\r\u0026#34;name\u0026#34;:\u0026#34;NewItem\u0026#34;\r} TableName: DNAMODB_TABLE_NAME get from the environment variable of lambda Item: A map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; =\u0026gt; Dynamodb - PutItemCommand: Creates a new item, or replaces an old item with a new item. If an item that has the same primary key as the new item already exists in the specified table, the new item completely replaces the existing item. PutItemCommand will replace the existing items to prevent that we will use uuidv4() to generate new \u0026ldquo;id\u0026rdquo; for product\nconst CreateProduct = async (event) =\u0026gt; {\rconsole.log(`createProduct function. event : \u0026#34;${event}\u0026#34;`);\rtry {\rconst productRequest = JSON.parse(event.body);\r// set productid\rconst productId = uuidv4();\rproductRequest.id = productId;\rconst params = {\rTableName: process.env.DYNAMODB_TABLE_NAME,\rItem: marshall(productRequest || {}),\r};\rconst createResult = await ddbClient.send(new PutItemCommand(params));\rconsole.log(createResult);\rreturn createResult;\r} catch (e) {\rconsole.error(e);\rthrow e;\r}\r}; 6. Deploy the switch case event \u0026ldquo;PUT\u0026rdquo;\ncase \u0026#34;PUT\u0026#34;:\rbody = await UpdateProduct(event);\rbreak; Update Product\nThe function receive the parameter event.body come form Apigw:\nexample\n{\r//Key\r\u0026#34;id\u0026#34;:10,\r//Attribute\r\u0026#34;name\u0026#34;:\u0026#34;myproduct\u0026#34;,\r\u0026#34;price\u0026#34;:123\r} =\u0026gt; Dynamodb - UpdateItemCommand: Edits an existing item\u0026rsquo;s attributes, or adds a new item to the table if it does not already exist. You can put, delete, or add attribute values. You can also perform a conditional update on an existing item\n// PUT /product/{id }\rconst UpdateProduct = async (event) =\u0026gt; {\rconsole.log(`updateProduct function. event : \u0026#34;${event}\u0026#34;`);\rtry {\rconst requestBody = JSON.parse(event.body);\rconst objKeys = Object.keys(requestBody);\rconsole.log(\r`updateProduct function. requestBody : \u0026#34;${requestBody}\u0026#34;, objKeys: \u0026#34;${objKeys}\u0026#34;`\r);\rconst params = {\rTableName: process.env.DYNAMODB_TABLE_NAME,\rKey: marshall({ id: event.pathParameters.id }),\rUpdateExpression: `SET ${objKeys\r.map((_, index) =\u0026gt; `#key${index} = :value${index}`)\r.join(\u0026#34;, \u0026#34;)}`,\rExpressionAttributeNames: objKeys.reduce(\r(acc, key, index) =\u0026gt; ({\r...acc,\r[`#key${index}`]: key,\r}),\r{}\r),\rExpressionAttributeValues: marshall(\robjKeys.reduce(\r(acc, key, index) =\u0026gt; ({\r...acc,\r[`:value${index}`]: requestBody[key],\r}),\r{}\r)\r),\r};\rconst updateResult = await ddbClient. end(new UpdateItemCommand(params));\rconsole.log(updateResult);\rreturn updateResult;\r} catch (e) {\rconsole.error(e);\rthrow e;\r}\r}; 7. Deploy the switch case event \u0026ldquo;DELETE\u0026rdquo;\ncase \u0026#34;DELETE\u0026#34;:\rbody = await DeleteProduct(event.pathParameters.id); // DELETE /product/{id}\rbreak; =\u0026gt; Dynamodb - DeleteItemCommand deletes a single item in a table by primary key\nconst DeleteProduct = async (productId) =\u0026gt; {\rconsole.log(`deleteProduct function. productId : \u0026#34;${productId}\u0026#34;`);\rtry {\rconst params = {\rTableName: process.env.DYNAMODB_TABLE_NAME,\rKey: marshall({ id: productId }),\r};\rconst deleteResult = await ddbClient.send(new DeleteItemCommand(params));\rconsole.log(deleteResult);\rreturn deleteResult;\r} catch (e) {\rconsole.error(e);\rthrow e;\r}\r}; 8. Handler return operation\nstatusCode: 200 - SUCCESS statusCode: 500 - ERROR example response json\n{ \u0026#34;message\u0026#34;: \u0026#34;Hello from Lambda!\u0026#34; }\r{\r\u0026#34;isBase64Encoded\u0026#34;: false,\r\u0026#34;statusCode\u0026#34;: 200,\r\u0026#34;body\u0026#34;: \u0026#34;{ \\\u0026#34;message\\\u0026#34;: \\\u0026#34;Hello from Lambda!\\\u0026#34; }\u0026#34;,\r\u0026#34;headers\u0026#34;: {\r\u0026#34;content-type\u0026#34;: \u0026#34;application/json\u0026#34;\r}\r} return {\rstatusCode: 200,\rbody: JSON.stringify({\rmessage: `Successfully finished operation: \u0026#34;${event.httpMethod}\u0026#34;`,\rbody: body\r})\r};\r} catch (e) {\rconsole.error(e);\rreturn {\rstatusCode: 500,\rbody: JSON.stringify\r({\rmessage: \u0026#34;Failed to perform operation.\u0026#34;,\rerrorMsg: e.message,\rerrorStack: e.stack,\r})\r}; "
},
{
	"uri": "//localhost:1313/3-basket/3-lambda_func/",
	"title": "Lambda NodeJS function",
	"tags": [],
	"description": "",
	"content": "API flow for basket microservice api gateway\nGET /basket -\u0026gt; GetAllBasket\rPOST /basket -\u0026gt; CreateBasket\r//Single basket with userName parameter - resource name\rGET /basket/{userName} -\u0026gt; GetBasket\rDELETE /basket/{userName} -\u0026gt; DeleteBasket\r//Checkout basket flow\rPOST /basket/checkout -\u0026gt; CheckOut example lambda \u0026amp; apigw proxy event 1. Create a another file which contain the necessary packages named \u0026ldquo;package.json\u0026rdquo; Add content: Download the packages api: Develop lambda production functions:\n2. Declare dynamodb service client object to call for dynamodb table and eventbridge client object to create an event\n// Create an Amazon DynamoDB service client object.\rconst ddbClient = new DynamoDBClient();\r// Create an Amazon EventBridge service client object.\rconst ebClient = new EventBridgeClient(); 3. Switch case event.httpMethod to perform web CRUD operations\nEvent httpd example .json link {\r\u0026#34;resource\u0026#34;: \u0026#34;/\u0026#34;,\r\u0026#34;path\u0026#34;: \u0026#34;/\u0026#34;,\r\u0026#34;httpMethod\u0026#34;: \u0026#34;GET\u0026#34;,\r\u0026#34;headers\u0026#34;: {\r\u0026#34;accept\u0026#34;: \u0026#34;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\u0026#34;,\r\u0026#34;accept-encoding\u0026#34;: \u0026#34;gzip, deflate, br\u0026#34;,\r\u0026#34;accept-language\u0026#34;: \u0026#34;en-US,en;q=0.9\u0026#34;,\r...\r}\r\u0026#34;queryStringParameters\u0026#34;: null,\r\u0026#34;multiValueQueryStringParameters\u0026#34;: null,\r\u0026#34;pathParameters\u0026#34;: null,\r\u0026#34;stageVariables\u0026#34;: null,\r\u0026#34;requestContext\u0026#34;: {\r\u0026#34;resourceId\u0026#34;: \u0026#34;2gxmpl\u0026#34;,\r\u0026#34;resourcePath\u0026#34;: \u0026#34;/\u0026#34;,\r\u0026#34;httpMethod\u0026#34;: \u0026#34;GET\u0026#34;,\r\u0026#34;extendedRequestId\u0026#34;: \u0026#34;JJbxmplHYosFVYQ=\u0026#34;,\r\u0026#34;requestTime\u0026#34;: \u0026#34;10/Mar/2020:00:03:59 +0000\u0026#34;,\r\u0026#34;path\u0026#34;: \u0026#34;/Prod/\u0026#34;,\r}\r} 4. Deploy the switch case event \u0026ldquo;GET\u0026rdquo;\nswitch (event.httpMethod) {\rcase \u0026#34;GET\u0026#34;:\rif (event.pathParameters != null) {\rbody = await GetBasket(event.pathParameters.userName);\r} else {\rbody = await GetAllBasket();\r}\rbreak;\r} Working with Items and Attributes of dynamodb.\nsdk dynamodb example\naws-sdk dynamodb api\naws-sdk dynamodb-util api\nGet basket \u0026amp;\u0026amp; Get all basket\nThe function receive the \u0026ldquo;userName\u0026rdquo; parameter within the event.queryStringParameters.userName come from Apigw\nTableName: DNAMODB_TABLE_NAME get from the environment variable of lambda Key: primary key of the item to retrieve, in this case \u0026ldquo;userName\u0026rdquo; =\u0026gt; Dynamodb - GetItemCommand return data match a set of attributes for the item with the given primary key\n=\u0026gt; Dynamodb - ScanCommand operation returns one or more items and item attributes by accessing every item in a table or a secondary index\n// GET basket/{userName}\rconst GetBasket = async (userName) =\u0026gt; {\rconsole.log(\u0026#34;getBasket\u0026#34;);\rtry {\rconst params = {\rTableName: process.env.DYNAMODB_TABLE_NAME,\rKey: marshall({ userName: userName })\r};\rconst { result } = await ddbClient.send(new GetItemCommand(params))\rconsole.log(result);\rreturn result ? unmarshall(result) : {};\r} catch (err) {\rconsole.error(err);\rthrow err;\r}\r}\rconst GetAllBasket = async () =\u0026gt; {\rconsole.log(\u0026#34;GetAll-Basket\u0026#34;);\rtry {\rconst params = {\rTableName: process.env.DYNAMODB_TABLE_NAME,\r}\rconst { result } = await ddbClient.send(new ScanCommand(params));\rconsole.log(result);\rreturn result ? unmarshall(result) : {};\r} catch (err) {\rconsole.error(err);\rthrow err;\r}\r} 5. Deploy the switch case event \u0026ldquo;POST\u0026rdquo;\ncase \u0026#34;POST\u0026#34;:\rif (event.path == \u0026#34;/basket/checkout\u0026#34;) {\rbody = await CheckOut(event);\r} else {\rbody = await CreateBasket(event);\r}\rbreak; =\u0026gt; Dynamodb - PutItemCommand: Creates a new item, or replaces an old item with a new item. If an item that has the same primary key as the new item already exists in the specified table, the new item completely replaces the existing item. PutItemCommand will replace the existing items to prevent that we will use uuidv4() to generate new \u0026ldquo;id\u0026rdquo; for product\nconst CreateBasket = async (event) =\u0026gt; {\rconsole.log(`createBasket function. event : \u0026#34;${event}\u0026#34;`);\rtry {\rconst tableRequest = JSON.parse(event.body);\rconst params = {\rTableName: process.env.DYNAMODB_TABLE_NAME,\rItem: marshall(tableRequest || {})\r};\rconst result = await ddbClient.send(new PutItemCommand(params));\rconsole.log(result);\r} catch (e) {\rconsole.error(e);\rthrow e;\r}\r} EventBridge api reference\nSample PutEvents request \u0026amp;\u0026amp; responce\nExamples\n=\u0026gt; EventBridge - PutEventsCommand: Sends custom events to Amazon EventBridge so that they can be matched to rules.\nCheckout event with the following steps:\nGet request basket with items Create a an event json object with basket items -\u0026gt; calculate the price and prepare the order (json) to send to order service Publish event to EventBridge -\u0026gt; Subscribe to order service EVENT_SOURCE: \u0026ldquo;com.swn.basket.checkoutbasket\u0026rdquo; EVENT_DETAILTYPE: \u0026ldquo;CheckoutBasket\u0026rdquo; EVENT_BUSNAME: \u0026ldquo;EventBus\u0026rdquo; Remove the basket Expected request payload:\n{\ruserName: testusername,\rattributes: [\rfirstName,\rlastName,\remail,\r...\r]\r} - Request format\n{\r\u0026#34;Source\u0026#34;: \u0026#34;com.swn.basket.checkoutbasket\u0026#34;,\r\u0026#34;Detail\u0026#34;: \u0026#34;{ \\\u0026#34;username\\\u0026#34;: \\\u0026#34;swn\\\u0026#34;, \\\u0026#34;basket\\\u0026#34;: \\\u0026#34;phone1\\\u0026#34; }\u0026#34;,\r\u0026#34;Resources\u0026#34;: [\r\u0026#34;resource1\u0026#34;,\r\u0026#34;resource2\u0026#34;\r],\r\u0026#34;DetailType\u0026#34;: \u0026#34;CheckoutBasket\u0026#34;,\r\u0026#34;EventBusName\u0026#34;: \u0026#34;SwnEventBus\u0026#34;\r},\r{\r\u0026#34;Source\u0026#34;: \u0026#34;com.swn.basket.checkoutbasket\u0026#34;,\r\u0026#34;Detail\u0026#34;: \u0026#34;{ \\\u0026#34;username\\\u0026#34;: \\\u0026#34;swn\\\u0026#34;, \\\u0026#34;basket\\\u0026#34;: \\\u0026#34;phone2\\\u0026#34; }\u0026#34;,\r\u0026#34;Resources\u0026#34;: [\r\u0026#34;resource1\u0026#34;,\r\u0026#34;resource2\u0026#34;\r],\r\u0026#34;DetailType\u0026#34;: \u0026#34;CheckoutBasket\u0026#34;,\r\u0026#34;EventBusName\u0026#34;: \u0026#34;SwnEventBus\u0026#34;\r} const CheckOut = async (event) =\u0026gt; {\rconsole.log(\u0026#34;CheckOutBasket\u0026#34;);\rconst request = JSON.parse(event.body);\rif (request == null || request.userName == null) {\rthrow new Error(`userName should exist in checkout Request: \u0026#34;${request}\u0026#34;`);\r}\r//1. Get request basket\rconst basket = await GetBasket(request.userName);\r//2. Calculate the price within the basket, prepare json order to send var payload = PrepareOrderPayload(request, basket);\r//3. Public event to eventbridge\rconst publishedevent = await PublicCheckOutEvent(payload);\r//4. remove the checkout basket\rawait DeleteBasket(request.userName);\r}\rconst PrepareOrderPayload = (request, basket) =\u0026gt; {\rconsole.log(\u0026#34;prepareOrderPayload\u0026#34;);\rtry {\rif (basket == null || basket.items == null) {\rthrow new Error(`basket should exist in items: \u0026#34;${basket}\u0026#34;`);\r}\rlet total = 0;\rbasket.items.forEach(\r(item) =\u0026gt; (totalPrice = totalPrice + item.price)\r);\rrequest.totalPrice = totalPrice;\rconsole.log(request);\r// copies all properties from basket into checkoutRequest\rObject.assign(request, basket);\rconsole.log(\r\u0026#34;Success prepareOrderPayload, orderPayload:\u0026#34;,\rrequest\r);\rreturn request;\r} catch (e) {\rconsole.error(e);\rthrow e;\r}\r}\r//public event to eventbrigde\rconst PublicCheckOutEvent = async (payload) =\u0026gt; {\rconsole.log(\r\u0026#34;publishCheckoutBasketEvent with payload :\u0026#34;,\rpayload\r);\rtry {\r// eventbridge parameters for setting event to target system\rconst params = {\rEntries: [\r{\rSource: process.env.EVENT_SOURCE,\rDetail: JSON.stringify(payload),\rDetailType: process.env.EVENT_DETAILTYPE,\rResources: [],\rEventBusName: process.env.EVENT_BUSNAME\r}\r]\r};\rconst data = await ebClient.send(new PutEventsCommand(params));\rconsole.log(\u0026#34;Success, event sent; requestID:\u0026#34;, data);\rreturn data;\r} catch (e) {\rconsole.error(e);\rthrow e;\r}\r} 6. Deploy the switch case event \u0026ldquo;DELETE\u0026rdquo;\ncase \u0026#34;DELETE\u0026#34;:\rbody = await DeleteBasket(event.pathParameters.userName);\rbreak; =\u0026gt; Dynamodb - DeleteItemCommand deletes a single item in a table by primary key\nconst DeleteBasket = async (userName) =\u0026gt; {\rconsole.log(`deleteBasket function. userName : \u0026#34;${userName}\u0026#34;`);\rtry {\rconst params = {\rTableName: process.env.DYNAMODB_TABLE_NAME,\rKey: marshall({userName: userName})\r}\rconst result = await ddbClient.send(new DeleteItemCommand(params));\rconsole.log(result);\rreturn result;\r} catch (e) {\rconsole.error(e);\rthrow e;\r}\r} 8. Handler return operation\nstatusCode: 200 - SUCCESS statusCode: 500 - ERROR example response json\nHTTP/1.1 200 OK\rx-amzn-RequestId: \u0026lt;RequestId\u0026gt;\rContent-Type: application/x-amz-json-1.1\rContent-Length: \u0026lt;PayloadSizeBytes\u0026gt;\rDate: \u0026lt;Date\u0026gt;\r{\r\u0026#34;FailedEntryCount\u0026#34;: 0, \u0026#34;Entries\u0026#34;: [\r{\r\u0026#34;EventId\u0026#34;: \u0026#34;11710aed-b79e-4468-a20b-bb3c0c3b4860\u0026#34;\r}, {\r\u0026#34;EventId\u0026#34;: \u0026#34;d804d26a-88db-4b66-9eaf-9a11c708ae82\u0026#34;\r}\r]\r} return {\rstatusCode: 200,\rbody: JSON.stringify({\rmessage: `Successfully finished operation: \u0026#34;${event.httpMethod}\u0026#34;`,\rbody: body\r})\r};\r} catch (e) {\rconsole.error(e);\rreturn {\rstatusCode: 500,\rbody: JSON.stringify\r({\rmessage: \u0026#34;Failed to perform operation.\u0026#34;,\rerrorMsg: e.message,\rerrorStack: e.stack,\r})\r}; "
},
{
	"uri": "//localhost:1313/2-product/4-apigw/",
	"title": "Api gateway",
	"tags": [],
	"description": "",
	"content": "api reference\nDefining API that includes the following HTTP endpoints:\nGET /product, POST /product GET /product/{id}, DELETE /product/{id}, PUT /product/{id} Using AWS Lambda as the backend integration (product/index.js). The full stack will be in the next section for better understanding.\nconst apigw = new LambdaRestApi(this, \u0026#34;productApi\u0026#34;, {\rproxy: false,\rrestApiName: \u0026#34;Product Service\u0026#34;,\rhandler: product_func,\r});\r//root path (/product)\rconst productapi = apigw.root.addResource(\u0026#34;product\u0026#34;);\rproductapi.addMethod(\u0026#34;GET\u0026#34;);\rproductapi.addMethod(\u0026#34;POST\u0026#34;);\r// sub-path (/product/{id})\rconst singleproduct = productapi.addResource(\u0026#34;{id}\u0026#34;);\rsingleproduct.addMethod(\u0026#34;GET\u0026#34;);\rsingleproduct.addMethod(\u0026#34;PUT\u0026#34;);\rsingleproduct.addMethod(\u0026#34;DELETE\u0026#34;); "
},
{
	"uri": "//localhost:1313/3-basket/4-apigw/",
	"title": "Api gateway",
	"tags": [],
	"description": "",
	"content": "api reference\nDefining API that includes the following HTTP endpoints:\nGET /basket, POST /basket GET /basket/{userName}, DELETE /basket/{userName}, POST /basket/checkout Using AWS Lambda as the backend integration (basket/index.js). The full stack will be in the next section for better understanding.\nconst apigw2 = new LambdaRestApi(this, \u0026#34;basketApi\u0026#34;, {\rproxy: false,\rrestApiName: \u0026#34;Basket Service\u0026#34;,\rhandler: bFunction,\r});\rconst basket = apigw.root.addResource(\u0026#34;basket\u0026#34;);\rbasket.addMethod(\u0026#34;GET\u0026#34;);\rbasket.addMethod(\u0026#34;POST\u0026#34;);\rconst singlebasket = basket.addResource(\u0026#34;{userName}\u0026#34;);\rsinglebasket.addMethod(\u0026#34;GET\u0026#34;);\rsinglebasket.addMethod(\u0026#34;DELETE\u0026#34;); "
},
{
	"uri": "//localhost:1313/4-order/",
	"title": "Order service",
	"tags": [],
	"description": "",
	"content": "Preview of AWS SQS\nAWS SQS (simple queue service) is a fully managed message queues for microservices distributed systems, and serverless applications. Enables you to decouple and scale microservices, distributed systems, and serverless applications. Eliminates the complexity and overhead associated with managing operating message-oriented middleware. Send, store and receive messages between software components at any volume. Two types and decpuple distributed software systems and components. Standard queues offer maximum throughput, best-effort ordering, and at-least-once delivery. FIFO queue are designed to gurantee that messages are processed exactly once, in the exact order that they are sent Provides a generic web service API that you can access using any programming language that hte AWS SDK support. In this section we will continue developing checkout event with basket and order service using EvenBridge and SQS services =\u0026gt; Create an event resilience architecture for case like when order service when down, the event won disapper. Instead it will wait in the sqs queue\n=\u0026gt; SUMMARY: Basket service will publish event to eventbridge if event satified the eventbridge rule -\u0026gt; go to SQS queue to subscribe to Order service\n"
},
{
	"uri": "//localhost:1313/4-order/4-apigw/",
	"title": "Api gateway",
	"tags": [],
	"description": "",
	"content": "api reference\nDefining API that includes the following HTTP endpoints:\nGET /order GET /order/{userName}?date=timestamp Using AWS Lambda as the backend integration (basket/index.js). The full stack will be in the next section for better understanding.\nconst apigw3 = new LambdaRestApi(this, \u0026#34;orderApi\u0026#34;, {\rproxy: false,\rrestApiName: \u0026#34;Order Service\u0026#34;,\rhandler: ofunction,\r});\rconst order = apigw3.root.addResource(\u0026#34;order\u0026#34;);\rorder.addMethod(\u0026#34;GET\u0026#34;);\rconst singleorder = order.addResource(\u0026#34;{userName}\u0026#34;);\rsingleorder.addMethod(\u0026#34;GET\u0026#34;); "
},
{
	"uri": "//localhost:1313/4-order/5-simplecheckout/",
	"title": "Basket Checkout result + podman",
	"tags": [],
	"description": "",
	"content": "In this section we will continue testing basket functions:\n//Checkout basket flow\nPOST /basket/checkout -\u0026gt; CheckOut\nTesting stacks for basket service: /////////////////////////////////////////////////////////\r// BASKET SERVICE //\rconst btable = new Table(this, \u0026#34;basket-table\u0026#34;, {\rpartitionKey: {\rname: \u0026#34;userName\u0026#34;,\rtype: AttributeType.STRING,\r},\rtableName: \u0026#34;basket\u0026#34;,\rbillingMode: BillingMode.PAY_PER_REQUEST,\rremovalPolicy: cdk.RemovalPolicy.DESTROY,\r});\rconst props2: NodejsFunctionProps = {\rbundling: {\rexternalModules: [\u0026#34;aws-sdk\u0026#34;],\r},\renvironment: {\rPRIMARY_KEY: \u0026#34;userName\u0026#34;,\rDYNAMODB_TABLE_NAME: btable.tableName,\rEVENT_SOURCE: \u0026#34;com.swn.basket.checkoutbasket\u0026#34;,\rEVENT_DETAILTYPE: \u0026#34;CheckoutBasket\u0026#34;,\rEVENT_BUSNAME: \u0026#34;EventBus\u0026#34;,\r},\rruntime: Runtime.NODEJS_16_X,\r};\rconst bFunction = new NodejsFunction(this, \u0026#34;Basket-function\u0026#34;, {\rentry: join(__dirname, `/../nodejs_src/basket/index.js`),\r...props2,\r});\rbtable.grantReadWriteData(bFunction);\r// Basket service api gateway\r/*\rGET /basket\rPOST /basket (checkout usecase)\rGET /basket/{userName}\rDELETE /basket/{userName}\r*/\rconst apigw2 = new LambdaRestApi(this, \u0026#34;basketApi\u0026#34;, {\rproxy: false,\rrestApiName: \u0026#34;Basket Service\u0026#34;,\rhandler: bFunction,\r});\rconst basket = apigw2.root.addResource(\u0026#34;basket\u0026#34;);\rbasket.addMethod(\u0026#34;GET\u0026#34;);\rbasket.addMethod(\u0026#34;POST\u0026#34;);\rconst singlebasket = basket.addResource(\u0026#34;{userName}\u0026#34;);\rsinglebasket.addMethod(\u0026#34;GET\u0026#34;);\rsinglebasket.addMethod(\u0026#34;DELETE\u0026#34;);\rconst basketcheckout = basket.addResource(\u0026#34;checkout\u0026#34;);\rbasketcheckout.addMethod(\u0026#34;POST\u0026#34;);\r/////////////////////////////////////////////////////////\r// ORDER SERVICE //\r// orders table\rconst otable = new Table(this, \u0026#34;sort-table\u0026#34;, {\rpartitionKey: {\rname: \u0026#34;userName\u0026#34;,\rtype: AttributeType.STRING,\r},\rsortKey: {\rname: \u0026#34;date\u0026#34;,\rtype: AttributeType.STRING,\r},\rtableName: \u0026#34;orders\u0026#34;,\rbillingMode: BillingMode.PAY_PER_REQUEST,\rremovalPolicy: cdk.RemovalPolicy.DESTROY,\r});\r//lambda\rconst props3: NodejsFunctionProps = {\rbundling: {\rexternalModules: [\u0026#34;aws-sdk\u0026#34;],\r},\renvironment: {\rPRIMARY_KEY: \u0026#34;userName\u0026#34;,\rSORT_KEY: \u0026#34;date\u0026#34;,\rDYNAMODB_TABLE_NAME: otable.tableName,\r},\r};\rconst ofunction = new NodejsFunction(this, \u0026#34;Order-function\u0026#34;, {\rentry: join(__dirname, `/../nodejs_src/order/index.js`),\r...props3,\r});\rotable.grantReadWriteData(ofunction);\r//api gateway\rconst apigw3 = new LambdaRestApi(this, \u0026#34;orderApi\u0026#34;, {\rproxy: false,\rrestApiName: \u0026#34;Order Service\u0026#34;,\rhandler: ofunction,\r});\rconst order = apigw3.root.addResource(\u0026#34;order\u0026#34;);\rorder.addMethod(\u0026#34;GET\u0026#34;);\rconst singleorder = order.addResource(\u0026#34;{userName}\u0026#34;);\rsingleorder.addMethod(\u0026#34;GET\u0026#34;);\r// Eventbus\r//create eventbus\rconst bus = new EventBus(this, \u0026#34;EventBus\u0026#34;, {\reventBusName: \u0026#34;EventBus\u0026#34;,\r});\r//create rule\rconst CheckoutRule = new Rule(this, \u0026#34;CheckoutRule\u0026#34;, {\rruleName: \u0026#34;CheckoutBasketRule\u0026#34;,\reventBus: bus,\renabled: true,\rdescription: \u0026#34;rule for when checkout basket\u0026#34;,\reventPattern: {\rsource: [\u0026#34;com.swn.basket.checkoutbasket\u0026#34;],\rdetailType: [\u0026#34;CheckoutBasket\u0026#34;],\r},\r});\r// grant permission to basket function to create event to bus\rbus.grantPutEventsTo(bFunction);\r//add target(order service) to rule\rCheckoutRule.addTarget(new LambdaFunction(ofunction)); Order lambda function for testing: exports.handler = async function (event) {\rconsole.log(\u0026#34;request\u0026#34;, JSON.stringtify(event, undefined, 2));\rreturn {\rstatusCode: 200,\rheaders: { \u0026#34;Content type\u0026#34;: \u0026#34;text/plain\u0026#34; },\rbody: `Hello from Order service !You \u0026#39;ve hit ${event.path}\\n`\r};\r} Dynamodb with \u0026ldquo;userName\u0026rdquo; as the primary key: API Gateway result method: Lambda stack: \u0026ldquo;CheckoutBasketRole\u0026rdquo; Event bus: Testing CheckoutBasket EventBridge Async Flow\nYour browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player!\r"
},
{
	"uri": "//localhost:1313/2-product/5-result+podman/",
	"title": "Result + Podman",
	"tags": [],
	"description": "",
	"content": " Testing stacks for product service: import * as cdk from \u0026#34;aws-cdk-lib\u0026#34;;\rimport { Construct } from \u0026#34;constructs\u0026#34;;\rimport { AttributeType, BillingMode, Table } from \u0026#39;aws-cdk-lib/aws-dynamodb\u0026#39;;\rimport { Runtime } from \u0026#34;aws-cdk-lib/aws-lambda\u0026#34;;\rimport {\rNodejsFunction,\rNodejsFunctionProps\r} from \u0026#34;aws-cdk-lib/aws-lambda-nodejs\u0026#34;;\rimport { join } from \u0026#34;path\u0026#34;;\rimport { LambdaRestApi } from \u0026#34;aws-cdk-lib/aws-apigateway\u0026#34;;\rexport class MicroserviceStack extends cdk.Stack {\rconstructor(scope: Construct, id: string, props?: cdk.StackProps) {\rsuper(scope, id, props);\rconst ptable = new Table(this, \u0026#34;product-table\u0026#34;, {\rpartitionKey: {\rname: \u0026#34;id\u0026#34;,\rtype: AttributeType.STRING,\r},\rtableName: \u0026#34;product\u0026#34;,\rremovalPolicy: cdk.RemovalPolicy.DESTROY,\rbillingMode: BillingMode.PAY_PER_REQUEST,\r});\rconst product_prop: NodejsFunctionProps = {\rbundling: {\rexternalModules: [\u0026#34;aws-sdk\u0026#34;],\r},\renvironment: {\rPRIMARY_KEY: \u0026#34;id\u0026#34;,\rDYNAMODB_TABLE_NAME: ptable.tableName,\r},\rruntime: Runtime.NODEJS_16_X,\r};\rconst product_func = new NodejsFunction(this, \u0026#34;product_function\u0026#34;, {\rentry: join(__dirname, \u0026#34;/../nodejs_src/product/index.js\u0026#34;),\r...product_prop,\r});\rptable.grantReadWriteData(product_func);\r// Single product with id parameter\r/*\rGET /product\rPOST /product\rGET /product/{id}\rPUT /product/{id}\rDELETE /product/{id}\r*/\rconst apigw = new LambdaRestApi(this, \u0026#34;productApi\u0026#34;, {\rproxy: false,\rrestApiName: \u0026#34;Product Service\u0026#34;,\rhandler: product_func,\r});\r//root path (/product)\rconst productapi = apigw.root.addResource(\u0026#34;product\u0026#34;);\rproductapi.addMethod(\u0026#34;GET\u0026#34;);\rproductapi.addMethod(\u0026#34;POST\u0026#34;);\r// sub-path (/product/{id})\rconst singleproduct = productapi.addResource(\u0026#34;{id}\u0026#34;);\rsingleproduct.addMethod(\u0026#34;GET\u0026#34;);\rsingleproduct.addMethod(\u0026#34;PUT\u0026#34;);\rsingleproduct.addMethod(\u0026#34;DELETE\u0026#34;);\r}\r} Dynamodb with \u0026ldquo;id\u0026rdquo; as the primary key: API Gateway result method: Lambda stack: Lambda function: Lambda triggers: Test event on lambda function with json: {\r\u0026#34;id\u0026#34;: \u0026#34;test\u0026#34;\r\u0026#34;name\u0026#34;:\u0026#34;testname\u0026#34;\r} =\u0026gt; Result SUCCESS\nTest API gateway path: Test with GET method in browser -\u0026gt; result with empty body reason for not having items on dynamodb table PODMAN Demo GetAllProduct and CreateProduct\nYour browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player!\rDemo GetProductbyID and UpdateProduct\nYour browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player!\rDemo DeleteProduct\nYour browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player!\r"
},
{
	"uri": "//localhost:1313/3-basket/5-result+podman/",
	"title": "Result + Podman",
	"tags": [],
	"description": "",
	"content": "In this section we will test these first functions:\nGET /basket -\u0026gt; GetAllBasket POST /basket -\u0026gt; CreateBasket //Single basket with userName parameter - resource name\nGET /basket/{userName} -\u0026gt; GetBasket DELETE /basket/{userName} -\u0026gt; DeleteBasket The testing does not include POST /basket/checkout event, this will be included in the Order service sections \u0026ldquo;Basket Checkout result + podman \u0026quot;\nTesting stacks for basket service: // BASKET SERVICE //\rconst btable = new Table(this, \u0026#34;basket-table\u0026#34;, {\rpartitionKey: {\rname: \u0026#34;userName\u0026#34;,\rtype: AttributeType.STRING,\r},\rtableName: \u0026#34;basket\u0026#34;,\rbillingMode: BillingMode.PAY_PER_REQUEST,\rremovalPolicy: cdk.RemovalPolicy.DESTROY,\r});\rconst prop2s: NodejsFunctionProps = {\rbundling: {\rexternalModules: [\u0026#34;aws-sdk\u0026#34;],\r},\renvironment: {\rPRIMARY_KEY: \u0026#34;userName\u0026#34;,\rDYNAMODB_TABLE_NAME: btable.tableName,\rEVENT_SOURCE: \u0026#34;com.swn.basket.checkoutbasket\u0026#34;,\rEVENT_DETAILTYPE: \u0026#34;CheckoutBasket\u0026#34;,\rEVENT_BUSNAME: \u0026#34;SwnEventBus\u0026#34;,\r},\rruntime: Runtime.NODEJS_16_X,\r};\rconst bFunction = new NodejsFunction(this, \u0026#34;Basket-function\u0026#34;, {\rentry: join(__dirname, `/../nodejs_src/basket/index.js`),\r...prop2s,\r});\rbtable.grantReadWriteData(bFunction);\r// Basket service api gateway\r/*\rGET /basket\rPOST /basket (checkout usecase)\rGET /basket/{userName}\rDELETE /basket/{userName}\r*/\rconst apigw2 = new LambdaRestApi(this, \u0026#34;basketApi\u0026#34;, {\rproxy: false,\rrestApiName: \u0026#34;Basket Service\u0026#34;,\rhandler: bFunction,\r});\rconst basket = apigw2.root.addResource(\u0026#34;basket\u0026#34;);\rbasket.addMethod(\u0026#34;GET\u0026#34;);\rbasket.addMethod(\u0026#34;POST\u0026#34;);\rconst singlebasket = basket.addResource(\u0026#34;{userName}\u0026#34;);\rsinglebasket.addMethod(\u0026#34;GET\u0026#34;);\rsinglebasket.addMethod(\u0026#34;DELETE\u0026#34;);\rconst basketcheckout = basket.addResource(\u0026#39;checkout\u0026#39;);\rbasketcheckout.addMethod(\u0026#34;POST\u0026#34;); Dynamodb with \u0026ldquo;userName\u0026rdquo; as the primary key: API Gateway result method: Lambda stack: Lambda triggers: Test event on lambda function with json: {\r\u0026#34;userName\u0026#34;: \u0026#34;testusername\u0026#34;\r} =\u0026gt; Result SUCCESS\nTest API gateway path: PODMAN\nDemo GetAllBasket, GetBasketbyName and CreateBasket\nYour browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player!\rDemo DeleteBasket\nYour browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player!\r"
},
{
	"uri": "//localhost:1313/6-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "Clean up all resource\ncdk destroy "
},
{
	"uri": "//localhost:1313/4-order/6-lambda_func/",
	"title": "Lambda NodeJS function and SQS queue",
	"tags": [],
	"description": "",
	"content": "API flow for orders microservice api gateway\nGET /order -\u0026gt; GetAllOrder\r//Single order with userName parameter - resource name\rGET /order/{userName} -\u0026gt; GetBasket\rexpected request: xxx/order/TestuserName?date=timestamp example lambda \u0026amp; apigw proxy event 1. Create a another file which contain the necessary packages named \u0026ldquo;package.json\u0026rdquo; Download the packages api: Develop lambda production functions:\nDeclare dynamodb service client object to call for dynamodb table\n// Create an Amazon DynamoDB service client object.\rconst ddbClient = new DynamoDBClient(); 3. Switch case event.httpMethod Events switch cases\nif (event.Records != null) {\rawait Invoke_SQS(event);\r} else if (event[\u0026#34;detail-type\u0026#34;] !== undefined) {\rawait Invoke_EventBridge(event);\r} else {\rreturn await Invoke_ApiGateway(event);\r} Case 1: If not case 2\u0026amp; 3 -\u0026gt; event come from apigw synchronously -\u0026gt; return a synchronous response -\u0026gt; code and body responce\nCase 2: event.Records exits -\u0026gt; event come from sqs polling -\u0026gt; create a new order -\u0026gt; create and store to table\nCase 3: event.detail-type exits -\u0026gt; the event come from eventbridge\u0026rsquo;s triggered payload (asynchronously)\ncase 1\n- Sample EventBridge event .json\n[\r{\r\u0026#34;Source\u0026#34;: \u0026#34;com.swn.basket.checkoutbasket\u0026#34;,\r\u0026#34;Detail\u0026#34;: \u0026#34;{ \\\u0026#34;username\\\u0026#34;: \\\u0026#34;swn\\\u0026#34;, \\\u0026#34;basket\\\u0026#34;: \\\u0026#34;phone1\\\u0026#34; }\u0026#34;,\r\u0026#34;Resources\u0026#34;: [\r\u0026#34;resource1\u0026#34;,\r\u0026#34;resource2\u0026#34;\r],\r\u0026#34;DetailType\u0026#34;: \u0026#34;CheckoutBasket\u0026#34;,\r\u0026#34;EventBusName\u0026#34;: \u0026#34;SwnEventBus\u0026#34;\r},\r{\r\u0026#34;Source\u0026#34;: \u0026#34;com.swn.basket.checkoutbasket\u0026#34;,\r\u0026#34;Detail\u0026#34;: \u0026#34;{ \\\u0026#34;username\\\u0026#34;: \\\u0026#34;swn\\\u0026#34;, \\\u0026#34;basket\\\u0026#34;: \\\u0026#34;phone2\\\u0026#34; }\u0026#34;,\r\u0026#34;Resources\u0026#34;: [\r\u0026#34;resource1\u0026#34;,\r\u0026#34;resource2\u0026#34;\r],\r\u0026#34;DetailType\u0026#34;: \u0026#34;CheckoutBasket\u0026#34;,\r\u0026#34;EventBusName\u0026#34;: \u0026#34;SwnEventBus\u0026#34;\r}\r] Request sample\n{\r\u0026#34;resource\u0026#34;: \u0026#34;/order/{userName}\u0026#34;,\r\u0026#34;path\u0026#34;: \u0026#34;/order/Gidle\u0026#34;,\r\u0026#34;httpMethod\u0026#34;: \u0026#34;GET\u0026#34;,\r\u0026#34;queryStringParameters\u0026#34;: {\r\u0026#34;date\u0026#34;: \u0026#34;2024-05-20T15:34:28.819Z\u0026#34;\r},\r\u0026#34;multiValueQueryStringParameters\u0026#34;: {\r\u0026#34;date\u0026#34;: [\r\u0026#34;2024-05-20T15:34:28.819Z\u0026#34;\r]\r},\r\u0026#34;pathParameters\u0026#34;: {\r\u0026#34;userName\u0026#34;: \u0026#34;Gidle\u0026#34;\r},\r\u0026#34;body\u0026#34;: null,\r\u0026#34;isBase64Encoded\u0026#34;: false\r} Get all order \u0026ldquo;/order\u0026rdquo; Get order by userName \u0026ldquo;/order/{userName} const Invoke_ApiGateway = async (event) =\u0026gt; {\rlet body;\rtry {\rswitch (event.httpMethod) {\rcase \u0026#34;GET\u0026#34;:\rif (event.pathParameters != null) {\rbody = await GetOrder(event);\r} else {\rbody = await GetAllOrder(event);\r}\rbreak;\rdefault:\rthrow new Error(`Unsupported route: \u0026#34;${event.httpMethod}\u0026#34;`);\r}\rconsole.log(body);\rreturn {\rstatusCode: 200,\rbody: JSON.stringify({\rmessage: `Successfully finished operation: \u0026#34;${event.httpMethod}\u0026#34;`,\rbody: body,\r}),\r};\r} catch (e) {\rconsole.error(e);\rreturn {\rstatusCode: 500,\rbody: JSON.stringify({\rmessage: \u0026#34;Failed to perform operation.\u0026#34;,\rerrorMsg: e.message,\rerrorStack: e.stack,\r}),\r};\r}\r} If exit event.pathParameters -\u0026gt; userName\nconst GetOrder = async (event) =\u0026gt; {\rconsole.log(\u0026#34;Get Order\u0026#34;);\rtry {\rconst userName = event.pathParameters.userName;\rconst dateex = event.queryStringParameters.date;\rconst params = {\r//conditions expression\rKeyConditionExpression: \u0026#34;userName = :userName and #dateAttr = :dateValue\u0026#34;,\rExpressionAttributeNames: {\r\u0026#34;#dateAttr\u0026#34;: \u0026#34;date\u0026#34; // Replace \u0026#34;date\u0026#34; with the actual attribute name\r},\rExpressionAttributeValues: {\r\u0026#34;:userName\u0026#34;: { S: userName },\r\u0026#34;:dateValue\u0026#34;: { S: dateex}\r},\rTableName: process.env.DYNAMODB_TABLE_NAME\r};\rconst { Items } = await ddbClient.send(new QueryCommand(params));\rconsole.log(Items);\rreturn Items.map((item) =\u0026gt; unmarshall(item));\r} catch (e) {\rconsole.log(\u0026#34;eat ass\u0026#34;);\rconsole.error(e);\rthrow e;\r}\r}\rconst GetAllOrder = async () =\u0026gt; {\rconsole.log(\u0026#34; Get_all_order\u0026#34;);\rtry {\rconst params = {\rTableName: process.env.DYNAMODB_TABLE_NAME,\r};\rconst { Items } = ddbClient.send(new ScanCommand(params));\rconsole.log(Items);\rreturn Items ? Items.map((item) =\u0026gt; unmarshall(item)) : {};\r} catch (e) {\rconsole.error(e);\rthrow e;\r}\r} Case 2 \u0026amp;\u0026amp; 3\nlambda with sqs EventSource mapping: Polling event: Consumer poll product for message in batch and then process the batch before returning event batch records. Queue is a type event polling event source can be use for buffering incoming lambda request and support asynchronous request\\ AWS SQS for decouple microservice and processing event asynchronously using queues in durable and resilience way. a. Case 2\nsqs\nlamdba sqs event-source\nevenbridge sqs event-target\nSQS queue: visibilityTimeout: Timeout of processing a single message. Lambda event source: An event source mapping is an AWS Lambda resource that reads from an event source and invokes a Lambda function. You can use event source mappings to process items from a stream or queue in services that don\u0026rsquo;t invoke Lambda functions directly.Available for SQS,S3,SNS,DynamoDB,Kinesis,Kafka,StreamEventSource Evenbridge sqs event-target: Use an SQS Queue as a target for Amazon EventBridge rules. import { SqsEventSource } from \u0026#34;aws-cdk-lib/aws-lambda-event-sources\u0026#34;;\rimport { Queue } from \u0026#34;aws-cdk-lib/aws-sqs\u0026#34;;\rimport { Duration } from \u0026#34;aws-cdk-lib\u0026#34;;\r//create queue\rconst order_queue = new Queue(this, \u0026#39;order_queue\u0026#39;, {\rqueueName: \u0026#39;OrderQueue\u0026#39;,\rvisibilityTimeout: Duration.seconds(30)\r});\r//add event to function\roFunction.addEventSource(new SqsEventSource(order_queue, {\r// number of records lambda receive from sqs service from event source mapping\rbatchSize: 1 //read message from sqs 1 by 1, Default 10\r})); Lambda function for SQS event source mapping polling invocation - Sample SQS message event:\n{\r\u0026#34;Records\u0026#34;: [\r{\r\u0026#34;messageId\u0026#34;: \u0026#34;059f36b4-87a3-44ab-83d2-661975830a7d\u0026#34;,\r\u0026#34;receiptHandle\u0026#34;: \u0026#34;AQEBwJnKyrHigUMZj6rYigCgxlaS3SLy0a...\u0026#34;,\r\u0026#34;body\u0026#34;: \u0026#34;Test message.\u0026#34;,\r\u0026#34;attributes\u0026#34;: {\r\u0026#34;ApproximateReceiveCount\u0026#34;: \u0026#34;1\u0026#34;,\r\u0026#34;SentTimestamp\u0026#34;: \u0026#34;1545082649183\u0026#34;,\r\u0026#34;SenderId\u0026#34;: \u0026#34;AIDAIENQZJOLO23YVJ4VO\u0026#34;,\r\u0026#34;ApproximateFirstReceiveTimestamp\u0026#34;: \u0026#34;1545082649185\u0026#34;\r},\r\u0026#34;messageAttributes\u0026#34;: {},\r\u0026#34;md5OfBody\u0026#34;: \u0026#34;e4e68fb7bd0e697a0ae8f1bb342846b3\u0026#34;,\r\u0026#34;eventSource\u0026#34;: \u0026#34;aws:sqs\u0026#34;,\r\u0026#34;eventSourceARN\u0026#34;: \u0026#34;arn:aws:sqs:us-east-2:123456789012:my-queue\u0026#34;,\r\u0026#34;awsRegion\u0026#34;: \u0026#34;us-east-2\u0026#34;\r},\r{\r\u0026#34;messageId\u0026#34;: \u0026#34;2e1424d4-f796-459a-8184-9c92662be6da\u0026#34;,\r\u0026#34;receiptHandle\u0026#34;: \u0026#34;AQEBzWwaftRI0KuVm4tP+/7q1rGgNqicHq...\u0026#34;,\r\u0026#34;body\u0026#34;: \u0026#34;Test message.\u0026#34;,\r\u0026#34;attributes\u0026#34;: {\r...\r}\r]\r} Sample event.body\n// expected request :\r{ \u0026#34;detail-type\\\u0026#34;:\\\u0026#34;CheckoutBasket\\\u0026#34;,\\\u0026#34;source\\\u0026#34;:\\\u0026#34;com.swn.basket.checkoutbasket\\\u0026#34;,\r\u0026#34;detail\\\u0026#34;:{\\\u0026#34;userName\\\u0026#34;:\\\u0026#34;swn\\\u0026#34;,\\\u0026#34;totalPrice\\\u0026#34;:1820, .. } const Invoke_SQS = async (event) =\u0026gt; {\rconsole.log(`sqsInvocation function. event : \u0026#34;${event}\u0026#34;`);\revent.Records.forEach(async (record) =\u0026gt; {\rconsole.log(\u0026#39;Record: %j\u0026#39;, record);\rconst checkoutEventRequest = JSON.parse(record.body);\r// create order item into db\rawait CreateOrder(checkoutEventRequest.detail);\r// detail object should be checkoutbasket json object\r});\r}\rconst CreateOrder = async (orderrequest) =\u0026gt; {\rtry {\rconsole.log(`createOrder function. event : \u0026#34;${orderrequest}\u0026#34;`);\r//get latest date\rorderrequest.date = new Date().toISOString();\rconsole.log(orderrequest);\rconst params = {\rTableName: process.env.DYNAMODB_TABLE_NAME,\rItem: marshall(orderrequest || {})\r};\rconst result = await ddbClient.send(new PutItemCommand(params));\rconsole(result);\rreturn result;\r}catch (e) {\rconsole.error(e);\rthrow e;\r}\r} b. case 3\nconst Invoke_EventBridge = async (event) =\u0026gt; {\rconsole.log(`eventBridgeInvocation function. event : \u0026#34;${event}\u0026#34;`);\rawait CreateOrder(event.detail);\r} "
},
{
	"uri": "//localhost:1313/4-order/7-checkoutresult/",
	"title": "CheckoutEvent result + podman",
	"tags": [],
	"description": "",
	"content": " Full testing stack for complete microservice with sqs queue: import * as cdk from \u0026#34;aws-cdk-lib\u0026#34;;\rimport { Construct } from \u0026#34;constructs\u0026#34;;\rimport { AttributeType, BillingMode, Table } from \u0026#39;aws-cdk-lib/aws-dynamodb\u0026#39;;\rimport { Runtime } from \u0026#34;aws-cdk-lib/aws-lambda\u0026#34;;\rimport {\rNodejsFunction,\rNodejsFunctionProps\r} from \u0026#34;aws-cdk-lib/aws-lambda-nodejs\u0026#34;;\rimport { join } from \u0026#34;path\u0026#34;;\rimport { LambdaRestApi } from \u0026#34;aws-cdk-lib/aws-apigateway\u0026#34;;\rimport { EventBus, Rule } from \u0026#34;aws-cdk-lib/aws-events\u0026#34;;\rimport { LambdaFunction, SqsQueue } from \u0026#34;aws-cdk-lib/aws-events-targets\u0026#34;;\rimport { SqsEventSource } from \u0026#34;aws-cdk-lib/aws-lambda-event-sources\u0026#34;;\rimport { Queue } from \u0026#34;aws-cdk-lib/aws-sqs\u0026#34;;\rimport { Duration } from \u0026#34;aws-cdk-lib\u0026#34;;\rexport class MicroserviceStack extends cdk.Stack {\rconstructor(scope: Construct, id: string, props?: cdk.StackProps) {\rsuper(scope, id, props);\r/////////////////////////////////////////////////////////\r// PRODUCT SERVICE //\rconst ptable = new Table(this, \u0026#34;product-table\u0026#34;, {\rpartitionKey: {\rname: \u0026#34;id\u0026#34;,\rtype: AttributeType.STRING,\r},\rtableName: \u0026#34;product\u0026#34;,\rremovalPolicy: cdk.RemovalPolicy.DESTROY,\rbillingMode: BillingMode.PAY_PER_REQUEST,\r});\rconst product_prop: NodejsFunctionProps = {\rbundling: {\rexternalModules: [\u0026#34;aws-sdk\u0026#34;],\r},\renvironment: {\rPRIMARY_KEY: \u0026#34;id\u0026#34;,\rDYNAMODB_TABLE_NAME: ptable.tableName,\r},\rruntime: Runtime.NODEJS_16_X,\r};\rconst product_func = new NodejsFunction(this, \u0026#34;product_function\u0026#34;, {\rentry: join(__dirname, \u0026#34;/../nodejs_src/product/index.js\u0026#34;),\r...product_prop,\r});\rptable.grantReadWriteData(product_func);\r// Production service api gateway\r/*\rGET /product\rPOST /product\rGET /product/{id}\rPUT /product/{id}\rDELETE /product/{id}\r*/\rconst apigw = new LambdaRestApi(this, \u0026#34;productApi\u0026#34;, {\rproxy: false,\rrestApiName: \u0026#34;Product Service\u0026#34;,\rhandler: product_func,\r});\r//root path (/product)\rconst productapi = apigw.root.addResource(\u0026#34;product\u0026#34;);\rproductapi.addMethod(\u0026#34;GET\u0026#34;);\rproductapi.addMethod(\u0026#34;POST\u0026#34;);\r// sub-path (/product/{id})\rconst singleproduct = productapi.addResource(\u0026#34;{id}\u0026#34;);\rsingleproduct.addMethod(\u0026#34;GET\u0026#34;);\rsingleproduct.addMethod(\u0026#34;PUT\u0026#34;);\rsingleproduct.addMethod(\u0026#34;DELETE\u0026#34;);\r/////////////////////////////////////////////////////////\r// BASKET SERVICE //\rconst btable = new Table(this, \u0026#34;basket-table\u0026#34;, {\rpartitionKey: {\rname: \u0026#34;userName\u0026#34;,\rtype: AttributeType.STRING,\r},\rtableName: \u0026#34;basket\u0026#34;,\rbillingMode: BillingMode.PAY_PER_REQUEST,\rremovalPolicy: cdk.RemovalPolicy.DESTROY,\r});\rconst props2: NodejsFunctionProps = {\rbundling: {\rexternalModules: [\u0026#34;aws-sdk\u0026#34;],\r},\renvironment: {\rPRIMARY_KEY: \u0026#34;userName\u0026#34;,\rDYNAMODB_TABLE_NAME: btable.tableName,\rEVENT_SOURCE: \u0026#34;com.swn.basket.checkoutbasket\u0026#34;,\rEVENT_DETAILTYPE: \u0026#34;CheckoutBasket\u0026#34;,\rEVENT_BUSNAME: \u0026#34;EventBus\u0026#34;,\r},\rruntime: Runtime.NODEJS_16_X,\r};\rconst bFunction = new NodejsFunction(this, \u0026#34;Basket-function\u0026#34;, {\rentry: join(__dirname, `/../nodejs_src/basket/index.js`),\r...props2,\r});\rbtable.grantReadWriteData(bFunction);\r// Basket service api gateway\r/*\rGET /basket\rPOST /basket (checkout usecase)\rGET /basket/{userName}\rDELETE /basket/{userName}\r*/\rconst apigw2 = new LambdaRestApi(this, \u0026#34;basketApi\u0026#34;, {\rproxy: false,\rrestApiName: \u0026#34;Basket Service\u0026#34;,\rhandler: bFunction,\r});\rconst basket = apigw2.root.addResource(\u0026#34;basket\u0026#34;);\rbasket.addMethod(\u0026#34;GET\u0026#34;);\rbasket.addMethod(\u0026#34;POST\u0026#34;);\rconst singlebasket = basket.addResource(\u0026#34;{userName}\u0026#34;);\rsinglebasket.addMethod(\u0026#34;GET\u0026#34;);\rsinglebasket.addMethod(\u0026#34;DELETE\u0026#34;);\rconst basketcheckout = basket.addResource(\u0026#34;checkout\u0026#34;);\rbasketcheckout.addMethod(\u0026#34;POST\u0026#34;);\r/////////////////////////////////////////////////////////\r// ORDER SERVICE //\r// orders table\rconst otable = new Table(this, \u0026#34;sort-table\u0026#34;, {\rpartitionKey: {\rname: \u0026#34;userName\u0026#34;,\rtype: AttributeType.STRING,\r},\rsortKey: {\rname: \u0026#34;date\u0026#34;,\rtype: AttributeType.STRING,\r},\rtableName: \u0026#34;orders\u0026#34;,\rbillingMode: BillingMode.PAY_PER_REQUEST,\rremovalPolicy: cdk.RemovalPolicy.DESTROY,\r});\r//lambda\rconst props3: NodejsFunctionProps = {\rbundling: {\rexternalModules: [\u0026#34;aws-sdk\u0026#34;],\r},\renvironment: {\rPRIMARY_KEY: \u0026#34;userName\u0026#34;,\rSORT_KEY: \u0026#34;date\u0026#34;,\rDYNAMODB_TABLE_NAME: otable.tableName,\r},\r};\rconst ofunction = new NodejsFunction(this, \u0026#34;Order-function\u0026#34;, {\rentry: join(__dirname, `/../nodejs_src/order/index.js`),\r...props3,\r});\rotable.grantReadWriteData(ofunction);\r//api gateway\rconst apigw3 = new LambdaRestApi(this, \u0026#34;orderApi\u0026#34;, {\rproxy: false,\rrestApiName: \u0026#34;Order Service\u0026#34;,\rhandler: ofunction,\r});\rconst order = apigw3.root.addResource(\u0026#34;order\u0026#34;);\rorder.addMethod(\u0026#34;GET\u0026#34;);\rconst singleorder = order.addResource(\u0026#34;{userName}\u0026#34;);\rsingleorder.addMethod(\u0026#34;GET\u0026#34;);\r// Eventbus\r//create eventbus\rconst bus = new EventBus(this, \u0026#34;EventBus\u0026#34;, {\reventBusName: \u0026#34;EventBus\u0026#34;,\r});\r//create rule\rconst CheckoutRule = new Rule(this, \u0026#34;CheckoutRule\u0026#34;, {\rruleName: \u0026#34;CheckoutBasketRule\u0026#34;,\reventBus: bus,\renabled: true,\rdescription: \u0026#34;rule for when checkout basket\u0026#34;,\reventPattern: {\rsource: [\u0026#34;com.swn.basket.checkoutbasket\u0026#34;],\rdetailType: [\u0026#34;CheckoutBasket\u0026#34;],\r},\r});\r// grant permission to basket function to create event to bus\rbus.grantPutEventsTo(bFunction);\r//sqs queue\rconst order_queue = new Queue(this, \u0026#39;order_queue\u0026#39;, {\rqueueName: \u0026#39;OrderQueue\u0026#39;,\rvisibilityTimeout: Duration.seconds(30)\r});\r//add event to function\rofunction.addEventSource(new SqsEventSource(order_queue,{batchSize: 1}));\r//add target(order service) to rule\rCheckoutRule.addTarget(new SqsQueue(order_queue));\r}// end of contruct\r}//end of class Testing EventSource Mapping and Polling Invocation Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player!\rTesting CheckoutBasket EventBridge Async Flow Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player!\rTesting Order service Api Gateway Sync Flow Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player!\r"
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]